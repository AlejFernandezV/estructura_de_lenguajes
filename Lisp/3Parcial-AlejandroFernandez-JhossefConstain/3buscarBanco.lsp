#| Carga del archivo donde estan definidas las estructuras cliente y cliente |#
(load "defEstructuras.lsp")
#| Carga del archivo donde estan creados los vectores para bancos y clientes|#
(load "crearVectores.lsp")


(defun buscar_banco_por_nombre (nombre)
    (setq cont 0)
    (setq posEncontrada 0)
    (loop
        (setq elemento (aref v_bancos cont)) 
        (if (eq (Banco-nombre elemento) nombre)
            (progn
                (setq posEncontrada cont)
                (return posEncontrada)
            )
            (setq posEncontrada -1)
        )
        (setq cont (+ cont 1))
        (when (> cont 2)(return))
    )
)
(defun buscar_banco_por_nit ()
    (setq band 0)
    (setq contB 0)
    (print "----------------------------------")
    (print "|   BUSQUEDA DEL BANCO POR NIT   |")
    (print "----------------------------------")
    (print "Ingrese el NIT del banco a buscar: ")
    (setq nit (read))
    (loop
        (setq elemento (aref v_bancos contB)) 
        (if (= nit (Banco-nit elemento))
            (progn
                (setq band 1)
                (print "----- Informacion banco -----")
                (format t "\nNIT: ~D" (Banco-nit elemento))
                (format t "\nNombre: ~D" (Banco-nombre elemento))
                (format t "\nNumero de empleados: ~D\n" (Banco-num_empleados elemento))
                (print "-----------------------------")
                (imprimir_clientes_banco elemento)
                (return)
            )
            (setq band 0)
        )
        (setq contB (+ contB 1))
        (when (> contB 2)(return))
    )
    (if (eq band 0)
        (print "Error! Banco no encontrado")
    )
)

(defun imprimir_clientes_banco (banco)
    (setq band 0)
    (setq contC 0)
    (setq clientes (Banco-vec_clientes banco))
    (print "----- Clientes del banco -----\n")
    (loop
        (setq cliente (aref clientes contC))
        (if (eq cliente 0)
            (return)
            (progn
                (setq contC (+ contC 1))
                (format t "Cliente #~D\n" contC)
                (format t "ID: ~D\n" (Cliente-numId cliente))
                (format t "Nombre: ~S\n" (Cliente-nombreCliente cliente))
                (format t "Genero: ~S\n" (Cliente-genero cliente))
                (format t "--------------------------------\n")
            )
        )
        (when (> contC 2)(return)) 
    )
    (if (eq contC 0)
        (print "Error! No hay clientes")
    )
)